import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
github_url = "https://raw.githubusercontent.com/HackBio-Internship/2025_project_collection/refs/heads/main/Python/Dataset/mcgc.tsv"
df = pd.read_csv(github_url, delimiter="\t")
df.head()
df.columns = df.columns.str.strip()
#1 
print(df.columns.tolist())
def reshape_growth_data(df):
    df_long = df.melt(id_vars=['time'], var_name='Strain', value_name='OD600')
    strain_mapping = {
    'A1': 'Strain1_Rep1_Mut1', 'A2': 'Strain1_Rep1_WT1', 'B1': 'Strain1_Rep1_Mut2', 'B2': 'Strain1_Rep1_WT2', 'C1': 'Strain1_Rep1_Mut3', 'C2': 'Strain1_Rep1', 'A3': 'Strain1_Rep2_Mut4', 'A4': 'Strain1_Rep2_WT4', 'B3': 'Strain2_Rep2_Mut5', 'B4': 'Strain1_Rep2_WT5', 'C3': 'Strain1_Rep2_Mut6', 'C4': 'Strain1_Rep2', 'A5': 'Strain2_Rep1_Mut7', 'A6': 'Strain2_Rep1_WT7', 'B5': 'Strain2_Rep1_Mut8', 'B6': 'Strain2_Rep1_WT8', 'C5': 'Strain2_Rep1_Mut9', 'C6': 'Strain2_Rep2', 'A7': 'Strain2_Rep2_Mut10', 'A8': 'Strain2_Rep2_WT10', 'B7': 'Strain2_Rep2_Mut11', 'B8': 'Strain2_Rep2_WT11', 'C7': 'Strain2_Rep2_Mut12', 'C8': 'Strain2_Rep2', 'A9': 'Strain3_Rep1_Mut13', 'A10': 'Strain3_Rep1_WT13', 'B9': 'Strain3_Rep1_Mut14', 'B10': 'Strain3_Rep1_WT14','C9': 'Strain3_Rep1_Mut15', 'C10': 'Strain3_Rep1', 'A11': 'Strain3_Rep2_Mut16', 'A12': 'Strain3_Rep2_WT16', 'B11': 'Strain3_Rep2_Mut17', 'B12': 'Strain3_Rep2_WT17', 'C11': 'Strain3_Rep2_Mut18', 'C12': 'Strain3_Rep2'}

    df_long['Strain'] = df_long['Strain'].map(strain_mapping)
    return df_long
df_long = reshape_growth_data(df)
print(df_long.head())
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_long, x="time", y="OD600", hue="Strain")
plt.xlabel("Time")
plt.ylabel("OD600")
plt.title("Growth Curves for Different Strains")
plt.legend(loc="upper left", bbox_to_anchor=(1, 1))
plt.show()
def get_carrying_capacity_time(df_long):
    carrying_capacity_times = []

    for strain, group in df_long.groupby("Strain"):
        max_od = group["OD600"].max()  # Carrying capacity
        threshold = 0.8 * max_od  # 80% of carrying capacity

        # Find first time OD600 reaches the threshold
        reach_time = group[group["OD600"] >= threshold]["time"].min()

        carrying_capacity_times.append({"Strain": strain, "Carrying_Capacity_Time": reach_time})

    return pd.DataFrame(carrying_capacity_times)

df_capacity = get_carrying_capacity_time(df_long)
print(df_capacity.head())
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df_capacity, x="Strain", y="Carrying_Capacity_Time")
plt.xticks(rotation=90)
plt.ylabel("Time to Carrying Capacity")
plt.title("Time to Carrying Capacity for Each Strain")
plt.show()
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df_capacity, x="Strain", y="Carrying_Capacity_Time")
plt.xticks(rotation=90)
plt.ylabel("Time to Carrying Capacity")
plt.title("Time to Carrying Capacity for Each Strain")
plt.show()
plt.figure(figsize=(8, 5))
sns.boxplot(data=df_capacity, y="Carrying_Capacity_Time")
plt.ylabel("Time to Carrying Capacity")
plt.title("Distribution of Time to Carrying Capacity")
plt.show()
from scipy.stats import ttest_ind

# Separate knock-in (+) and knock-out (-) groups
df_capacity["Type"] = df_capacity["Strain"].apply(lambda x: "Knock-in" if "WT" in x else "Knock-out")

knock_in = df_capacity[df_capacity["Type"] == "Knock-in"]["Carrying_Capacity_Time"]
knock_out = df_capacity[df_capacity["Type"] == "Knock-out"]["Carrying_Capacity_Time"]

# Perform t-test
t_stat, p_value = ttest_ind(knock_in, knock_out, nan_policy='omit')

print(f"T-test results: t-statistic = {t_stat:.2f}, p-value = {p_value:.4f}")

# Interpretation
if p_value < 0.05:
    print("Statistically significant difference: Knock-in vs. Knock-out.")
else:
    print("No significant difference between Knock-in and Knock-out strains.")
